import React, { Component } from "react";
import { PageHeader, Form, Input, Select, Button, Table } from 'antd'
import { gardeOptions, classOptions, visionOptions, dataSource } from './options'
import SchoolPieChart from './components/SchoolPieChart'
import ClassBarChart from './components/ClassBarChart'
import TableInfo from './components/TableInfo'
import TableList from './components/TableList'
import * as XLSX from 'xlsx';

import './index.scss'

const { Option } = Select;
@Form.create()
class Home extends Component {
    constructor(props) {
        super(props);
        this.state = {
            tableData: dataSource,
            visionUnusual: [],
            visionNormal: [],
            visionNoTest: [],
            gardeOptions: []
        }
    }

    componentWillMount() {
        this.initFun(dataSource)
    }

    // 读取excel表格数据
    // onImportExcel = file => {
    //     // 获取上传的文件对象
    //     const { files } = file.target;
    //     // 通过FileReader对象读取文件
    //     const fileReader = new FileReader();
    //     fileReader.onload = event => {
    //         try {
    //             const { result } = event.target;
    //             // 以二进制流方式读取得到整份excel表格对象
    //             const workbook = XLSX.read(result, { type: 'binary' });
    //             let data = []; // 存储获取到的数据
    //             // 遍历每张工作表进行读取（这里默认只读取第一张表）
    //             for (const sheet in workbook.Sheets) {
    //                 if (workbook.Sheets.hasOwnProperty(sheet)) {
    //                     // 利用 sheet_to_json 方法将 excel 转成 json 数据
    //                     data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));
    //                     // break; // 如果只取第一张表，就取消注释这行
    //                 }
    //             }
    //             setLocalStore('tableData', JSON.stringify(data))
    //             this.initFun(data)
    //             console.log('data===》', data)
    //         } catch (e) {
    //             // 这里可以抛出文件类型错误不正确的相关提示
    //             console.log('文件类型不正确');
    //             return;
    //         }
    //     };
    //     // 以二进制方式打开文件
    //     fileReader.readAsBinaryString(files[0]);
    // }


    // 查询
    handleSubmit = e => {
        e.preventDefault();
        this.props.form.validateFields((err, values) => {
            if (!err) {
                let temp = [];
                dataSource.forEach(data => {
                    if (
                        (values.name ? data.name.includes(values.name) : true) &&
                        (values.studentId ? data.studentId.toString().includes(values.studentId) : true) &&
                        (values.class1 ? data.class1.includes(values.class1) : true) &&
                        (values.garde ? data.garde.includes(values.garde) : true) &&
                        (values.vision ? ((data.leftEye ? data.leftEye.toString().includes(values.vision) : true) ||
                            (data.rightEye ? data.rightEye.toString().includes(values.vision) : true)) : true)
                    ) {
                        temp.push(data);
                    }
                })
                this.initFun(temp);
            }
        });
    };

    // 初始化数据
    initFun = (data) => {
        let visionUnusual = [], visionNormal = [], visionNoTest = [];
        data.forEach((d) => {
            if (d.leftEye || d.rightEye) {
                if (d.leftEye < 0.6 || d.rightEye < 0.6) {
                    visionUnusual.push(d)
                } else {
                    visionNormal.push(d)
                }
            } else {
                visionNoTest.push(d)
            }
        })
        this.setState({ visionUnusual, visionNormal, visionNoTest, tableData: data })
    }

    // 重置
    reset = () => {
        this.props.form.resetFields();
        this.initFun(dataSource)
    }

    // 删除
    delItem = (index) => {
        dataSource.splice(index, 1);
        this.initFun(dataSource)
    }

    render() {
        const { tableData, visionUnusual, visionNormal, visionNoTest } = this.state;
        const { getFieldDecorator } = this.props.form;
        return (
            <div className="page-home">
                <PageHeader title="首页" extra={[
                    // tableData.length === 0 && <input type='file' accept='.xlsx, .xls' onChange={this.onImportExcel} />,
                ]} />

                <div className="page-warpper">
                    <div className="top">
                        <div className="left">
                            <h3>全校视力概览</h3>
                            <SchoolPieChart dataSource={dataSource}  data={[
                                { 'value': visionNoTest.length, 'name': '未测' },
                                { 'value': visionNormal.length, 'name': '屈光正常' },
                                { 'value': visionUnusual.length, 'name': '屈光不正' },
                            ]} />
                        </div>
                        <div className="right">
                            <h3>各年级视力情况</h3>
                            <ClassBarChart />
                        </div>
                    </div>
                    <div className="bottom">
                        <h3>视力数据列表</h3>
                        <Form layout="inline" onSubmit={this.handleSubmit}>
                            <Form.Item label="年级：">
                                {
                                    getFieldDecorator('class1', {})(
                                        <Select placeholder="请选择" allowClear={true}>
                                            {
                                                gardeOptions.map(garde => (
                                                    <Option key={garde} value={garde}>{garde}</Option>
                                                ))
                                            }
                                        </Select>
                                    )
                                }
                            </Form.Item>
                            <Form.Item label="班级：">
                                {
                                    getFieldDecorator('garde', {})(
                                        <Select placeholder="请选择" allowClear={true}>
                                            {
                                                classOptions.map(class1 => (
                                                    <Option key={class1} value={class1}>{class1}</Option>
                                                ))
                                            }
                                        </Select>
                                    )
                                }
                            </Form.Item>
                            <Form.Item label="视力：">
                                {
                                    getFieldDecorator('vision', {})(
                                        <Select placeholder="请选择" allowClear={true}>
                                            {
                                                visionOptions.map(vision => (
                                                    <Option key={vision} value={vision}>{vision}</Option>
                                                ))
                                            }
                                        </Select>
                                    )
                                }

                            </Form.Item>
                            <Form.Item label="学号：">
                                {getFieldDecorator('studentId', {})(<Input placeholder="请输入" />)}
                            </Form.Item>
                            <Form.Item label="姓名：">
                                {getFieldDecorator('name', {})(<Input placeholder="请输入" />)}
                            </Form.Item>
                            <Form.Item >
                                <Button type="primary" htmlType="submit">查询</Button>
                                <Button onClick={this.reset}>重置</Button>
                            </Form.Item>
                        </Form>
                        <TableInfo
                            tableData={tableData}
                            visionUnusual={visionUnusual}
                            visionNormal={visionNormal}
                            visionNoTest={visionNoTest} />
                        <div className="table">
                            <div className="table-header">
                                <div className="left">
                                    视力结果：<span> {`< 0.6 为屈光不正，≥0.6 为屈光正常`}</span>
                                </div>
                                {/* <div className="right">
                                    <Button type="primary">导出信息模版</Button>
                                    <Button >导人学生信息</Button>
                                </div> */}
                            </div>
                            <TableList tableData={tableData} delItem={this.delItem} />
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

export default Home;
